import { Injectable } from '@nestjs/common';
import { Context } from 'telegraf';
import { ConfigService } from '@nestjs/config';
import { UserService } from '../users/user.service';

@Injectable()
export class BotService {
  constructor(
      private readonly configService: ConfigService,
      private readonly userService: UserService,
  ) {}

  public readonly checkGroupMembership = async (ctx: Context) => {
    const userId = ctx.message.from.id;
    const user = await this.userService.getUserById(userId);
    if (user) {
      return true;
    }
    if (ctx.chat.type !== 'group') {
      await ctx.reply(
          '‚ùå –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ \n \n –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
      );
      return false;
    }

    const chatId = ctx.chat.id;
    const chatMember = await ctx.telegram.getChatMember(chatId, ctx.from.id);

    if (
        chatMember.status !== 'administrator' &&
        chatMember.status !== 'member' &&
        chatMember.status !== 'creator'
    ) {
      await ctx.reply(
          '‚ùå –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ \n \n –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.',
      );
      return false;
    }

    return true;
  };

  async start(ctx: Context) {
    const userId = ctx.message.from.id;
    const user = await this.userService.getUserById(userId);
    if (!user) {
      await ctx.reply(
          `üëã –ü—Ä–∏–≤–µ—Ç ${ctx.message.from.first_name}! \n \n ‚ùì –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å ‚ûï',
                    callback_data: 'check_payment_status',
                  },
                ],
              ],
            },
          },
      );
      return;
    }

    if (ctx.chat.type === 'group') {
      await ctx.reply(
          `üëã –ü—Ä–∏–≤–µ—Ç ${ctx.message.from.first_name}! \n \n ‚ùì –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '–ó–∞–ø—É—Å—Ç–∏—Ç—å üöÄ',
                    url: this.configService.get('bot_url'),
                  },
                ],
              ],
            },
          },
      );
    }

    await ctx.reply(
        `üëã –ü—Ä–∏–≤–µ—Ç ${ctx.message.from.first_name}! \n \n ‚ùì –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–ó–∞–ø—É—Å—Ç–∏—Ç—å üöÄ',
                  web_app: { url: this.configService.get('frontend_url') },
                },
              ],
            ],
          },
        },
    );
  }

  async handleCallbackQuery(ctx: Context) {
    const userId = ctx.callbackQuery.from.id;
    const user = await this.userService.getUserById(userId);
    if (!user) {
      await this.userService.createUser(userId);
    }
    await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
    await ctx.reply(
        `‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω \n \n –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ó–∞–ø—É—Å—Ç–∏—Ç—å üöÄ', url: this.configService.get('bot_url') }],
            ],
          },
        },
    );
  }
}